Drupal Role Fetcher

Author: Steve Moitozo, <steve_moitozo@sil.org>
Copyright: SIL International, http://www.sil.org
Written for the Polder Consortium, http://www.polderconsortium.org

This code is licensed under the GPL v2, http://www.gnu.org/licenses/gpl-2.0.html

The Drupal Role Fetcher (DFR) is a small PHP application that runs alongside a Drupal site and answers queries for user roles from authorized agents. Our purpose for developing this application is that it plays a key role in a Web application architecture made up of a series of SAML-enabled (federated) applications that permit access to authenticated users from numerous SAML identity providers. Our Web application architecture includes: simpleSAMLphp, Drupal, DokuWiki, and FUDForum. We needed centralized role management for these applications but users could be authenticating against one of several SAML IdP's. Since access to these Web resources is controlled centrally in a Drupal site it is not appropriate for SAML IdP's to assign roles for our context to their users. Therefore, our central Drupal site is the point where roles for our realm are assigned to users, regardless of the IdP they used. Our simpleSAMLphp Service Provider queries the Drupal site, via the Drupal Role Fetcher, to access the assigned role information that is stored for each user. This is accomplished using two components: the Drupal Role Fetcher (this app) and the AddRolesFromDrupal Auth Proc for SimpleSAMLphp.

The DRF satisfies the following requirements:

+ roles are rooted in a configurable realm – for instance, if “public.pcidp.org” is the realm then the role “pc-steering-group-member” would become pc-steering-group-member@public.pcidp.org (NOTE: It is still up to the SP to varify that the IdP is public.pcidp.org)
+ authorized agents are configured in the configuration file of the DFR using a simple array that includes the following information for each agent
  - shared secret key
  - agent name
  - agent description
  - agent contact person's e-mail
+ the DFR utilizes the Drupal API for retrieving user information
+ requests to the DRF are idempotent (i.e., they can never cause harm to the Drupal site or result in an error that will negatively affect the requesting agent)
+ if an agent requests roles for a bogus user the DFR will return NULL
+ if an agent requests roles for a user that has no roles the DFR will return NULL
+ the DFR suppresses the “Authenticated User” and “Administrator” roles
+ requests to the DFR will be simple GET requests with two parameters: sharedsec (the shared secret key for the agent) and userid (typically this will be the value of the user's eduPersonPrincipleName or eduPersonTargettedID attribute)
+ the value of “userid” will be used to search for a matching user in Drupal's authmap table (via Drupal's user_external_load function)
+ agents can request responses to be serialized in one of three ways by passing the optional “mode” parameter: CSV, XML, or JSON (if no serialization is specified the default will be CSV)
+ the DFR will respond with either NULL (in the case of no matching user or no roles for the user) or with a list (array) containing the following information serialized in the requested serialization (CSV, PHP, or JSON; the default will be a CSV string)
  - role name
+ the DFR requires all requests to come over encrypted HTTP (HTTPS)